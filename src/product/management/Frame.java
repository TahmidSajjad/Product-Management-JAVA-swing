/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package product.management;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tahmid Sajjad
 */
public class Frame extends javax.swing.JFrame {

    public static String itemId;
    public static String itemName;
    public static String itemPrice;
    public boolean billFrameOpen;

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();
        show_user();
        dataSelector();
        Font font = new Font("Tahoma", Font.PLAIN, 16);
        jTable1.setFont(font);
    }

    public ArrayList<Data> dataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }
//For showing data in the columns of jtable 

    public void show_user() {
        ArrayList<Data> list = dataList();

        TableColumnModel tcm = jTable1.getColumnModel();
        tcm.getColumn(1).setPreferredWidth(250);
        tcm.getColumn(0).setPreferredWidth(50);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(60);
        tcm.getColumn(4).setPreferredWidth(100);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }

    //Select data for view or update 
    public void dataSelector() {

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

                int numberOfRow = jTable1.getSelectedRow();

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                String id = model.getValueAt(numberOfRow, 0).toString();
                String name = model.getValueAt(numberOfRow, 1).toString();
                String price = model.getValueAt(numberOfRow, 2).toString();
                String brand = model.getValueAt(numberOfRow, 3).toString();
                String category = model.getValueAt(numberOfRow, 4).toString();

                txtID.setText(id);
                txtName.setText(name);
                txtPrice.setText(price);
                txtBrand.setText(brand);
                comboCat.setSelectedItem(category);

                //billing part
                if (billFrameOpen == true) {
                    itemId = txtID.getText();
                    itemName = txtName.getText();
                    itemPrice = txtPrice.getText();

                    Bill.txtid.setText(itemId);
                    Bill.txtname.setText(itemName);
                    Bill.txtprice.setText(itemPrice);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        comboCat = new javax.swing.JComboBox<>();
        searchtxt = new javax.swing.JTextField();
        txtBrand = new javax.swing.JTextField();
        jlabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        maxPrice = new javax.swing.JButton();
        minPrice = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        allProductsBtn = new javax.swing.JButton();
        processorBtn = new javax.swing.JButton();
        motherboardBtn = new javax.swing.JButton();
        gpuBtn = new javax.swing.JButton();
        ramBtn = new javax.swing.JButton();
        billingbtn = new javax.swing.JButton();
        BillingHistory = new javax.swing.JButton();
        addAdmin = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(java.awt.Color.white);

        jPanel1.setBackground(new java.awt.Color(162, 155, 254));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("HI-TECH COMPUTERS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(551, 551, 551)
                .addComponent(jLabel1)
                .addContainerGap(468, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(95, 39, 205));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("ID:");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Price:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Category:");

        txtID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        txtName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnInsert.setBackground(new java.awt.Color(230, 126, 34));
        btnInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnInsert.setText("INSERT");
        btnInsert.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(230, 126, 34));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(230, 126, 34));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(230, 126, 34));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(230, 126, 34));
        btnView.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnView.setText("VIEW");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        comboCat.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboCat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Processor", "Motherboard", "Graphics Card", "Ram" }));
        comboCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCatActionPerformed(evt);
            }
        });

        searchtxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchtxtActionPerformed(evt);
            }
        });
        searchtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchtxtKeyReleased(evt);
            }
        });

        txtBrand.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        jlabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlabel6.setText("Brand:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Price", "Brand", "Category"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Search :");

        maxPrice.setBackground(new java.awt.Color(230, 126, 34));
        maxPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        maxPrice.setText("Products with maximum price");
        maxPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPriceActionPerformed(evt);
            }
        });

        minPrice.setBackground(new java.awt.Color(230, 126, 34));
        minPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        minPrice.setText("Products with minimum price");
        minPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGap(78, 78, 78)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(52, 52, 52)
                                    .addComponent(btnView)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jlabel6))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(241, 241, 241))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5)
                                        .addComponent(btnInsert))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboCat, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addComponent(btnUpdate)
                                            .addGap(27, 27, 27)
                                            .addComponent(btnDelete)
                                            .addGap(31, 31, 31)
                                            .addComponent(btnClear)))
                                    .addGap(54, 54, 54)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(maxPrice)
                        .addGap(28, 28, 28)
                        .addComponent(minPrice)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addGap(23, 23, 23))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnView))
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabel6)
                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxPrice)
                    .addComponent(minPrice))
                .addGap(77, 77, 77))
        );

        jPanel6.setBackground(new java.awt.Color(142, 68, 173));

        allProductsBtn.setBackground(new java.awt.Color(230, 126, 34));
        allProductsBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        allProductsBtn.setText("All Products");
        allProductsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allProductsBtnActionPerformed(evt);
            }
        });

        processorBtn.setBackground(new java.awt.Color(230, 126, 34));
        processorBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        processorBtn.setText("Processors");
        processorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processorBtnActionPerformed(evt);
            }
        });

        motherboardBtn.setBackground(new java.awt.Color(230, 126, 34));
        motherboardBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        motherboardBtn.setText("Motherboards");
        motherboardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motherboardBtnActionPerformed(evt);
            }
        });

        gpuBtn.setBackground(new java.awt.Color(230, 126, 34));
        gpuBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gpuBtn.setText("GPU");
        gpuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpuBtnActionPerformed(evt);
            }
        });

        ramBtn.setBackground(new java.awt.Color(230, 126, 34));
        ramBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ramBtn.setText("Ram");
        ramBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ramBtnActionPerformed(evt);
            }
        });

        billingbtn.setBackground(new java.awt.Color(230, 126, 34));
        billingbtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        billingbtn.setText("Billing");
        billingbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billingbtnActionPerformed(evt);
            }
        });

        BillingHistory.setBackground(new java.awt.Color(230, 126, 34));
        BillingHistory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BillingHistory.setText("Billing History");
        BillingHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillingHistoryActionPerformed(evt);
            }
        });

        addAdmin.setBackground(new java.awt.Color(230, 126, 34));
        addAdmin.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addAdmin.setText("Add Admin");
        addAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BillingHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(motherboardBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gpuBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ramBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(allProductsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(billingbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(allProductsBtn)
                .addGap(32, 32, 32)
                .addComponent(processorBtn)
                .addGap(31, 31, 31)
                .addComponent(motherboardBtn)
                .addGap(28, 28, 28)
                .addComponent(gpuBtn)
                .addGap(28, 28, 28)
                .addComponent(ramBtn)
                .addGap(63, 63, 63)
                .addComponent(billingbtn)
                .addGap(18, 18, 18)
                .addComponent(BillingHistory)
                .addGap(34, 34, 34)
                .addComponent(addAdmin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCatActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed

        if (!txtID.getText().isEmpty()) {

            try {
                Class.forName("java.sql.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");

                String query = "select * from products where id='" + txtID.getText() + "' ";
                PreparedStatement statement = con.prepareStatement(query);

                ResultSet set = statement.executeQuery();

                while (set.next()) {
                    txtName.setText(set.getString("name"));
                    txtPrice.setText(set.getString("price"));
                    txtBrand.setText(set.getString("brand"));
                    comboCat.setSelectedItem(set.getString("category"));
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error!! " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "insert an id to view");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtID.setText(null);
        txtName.setText(null);
        txtPrice.setText(null);
        txtBrand.setText(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (!txtID.getText().isEmpty()) {

            try {
                Class.forName("java.sql.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
                Statement stmt = (Statement) con.createStatement();
                String query = "delete from products where id='" + txtID.getText() + "' ";
                stmt.executeUpdate(query);

                txtName.setText(null);
                txtPrice.setText(null);
                txtBrand.setText(null);

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);
                show_user();

                JOptionPane.showMessageDialog(null, "Data Deleted Successfully");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error!! " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please insert an id or select a data to delete");

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        if (!txtID.getText().isEmpty() && !txtName.getText().isEmpty() && !txtPrice.getText().isEmpty() && !txtBrand.getText().isEmpty()) {
            try {
                Class.forName("java.sql.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
                Statement stmt = (Statement) con.createStatement();
                String query = "update products set name='" + txtName.getText() + "', price='" + txtPrice.getText() + "', brand='" + txtBrand.getText() + "', category='" + comboCat.getSelectedItem().toString() + "' where id='" + txtID.getText() + "' ";
                stmt.executeUpdate(query);

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);
                show_user();

                JOptionPane.showMessageDialog(null, "Data Updated Successfully");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error!! " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an id or data to update");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed

        if (!txtID.getText().isEmpty() && !txtName.getText().isEmpty() && !txtPrice.getText().isEmpty() && !txtBrand.getText().isEmpty()) {

            try {
                Class.forName("java.sql.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
                Statement stmt = (Statement) con.createStatement();
                String query = "insert into products (id, name, price, brand, category) values ( '" + txtID.getText() + "', '" + txtName.getText() + "', '" + txtPrice.getText() + "', '" + txtBrand.getText() + "', '" + comboCat.getSelectedItem().toString() + "' )";

                stmt.executeUpdate(query);

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);
                show_user();

                JOptionPane.showMessageDialog(null, "Data successfully inserted");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error!! " + ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please fill all the boxes");
        }
    }//GEN-LAST:event_btnInsertActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    //Data Sort By Price
    public ArrayList<Data> orderByDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "select * from products order by price";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void orderByData() {
        ArrayList<Data> list = orderByDataList();

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            model.addRow(row);
        }
    }


    private void billingbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billingbtnActionPerformed
        // TODO add your handling code here:
        Bill billFrame = new Bill();
        billFrame.setVisible(true);
        billFrame.setAlwaysOnTop(true);
        billFrameOpen = true;

        billFrame.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                // The window is closing
                billFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                billFrameOpen = false;
            }

        });
    }//GEN-LAST:event_billingbtnActionPerformed

    //searching data
    public ArrayList<Data> searchDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "select * from products WHERE REPLACE(name,' ','') like REPLACE('%" + searchtxt.getText() + "%','  ','')";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showSearchData() {
        ArrayList<Data> list = searchDataList();

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            model.addRow(row);
        }
    }


    private void searchtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtxtKeyReleased
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        model.setRowCount(0);

        showSearchData();
    }//GEN-LAST:event_searchtxtKeyReleased

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void searchtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchtxtActionPerformed

    //processors data 
    public ArrayList<Data> ProcessorDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products where category='processor'";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showProcessorData() {
        ArrayList<Data> list = ProcessorDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }


    private void processorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processorBtnActionPerformed
        // TODO add your handling code here:

        showProcessorData();

    }//GEN-LAST:event_processorBtnActionPerformed

    //gpu data
    public ArrayList<Data> gpuDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products where category='graphics card'";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showGpuData() {
        ArrayList<Data> list = gpuDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }


    private void gpuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpuBtnActionPerformed
        // TODO add your handling code here:
        showGpuData();
    }//GEN-LAST:event_gpuBtnActionPerformed

    //motherboard data
    public ArrayList<Data> motherboardDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products where category='mainboard'";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showMotherboardData() {
        ArrayList<Data> list = motherboardDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }


    private void motherboardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motherboardBtnActionPerformed
        // TODO add your handling code here:
        showMotherboardData();
    }//GEN-LAST:event_motherboardBtnActionPerformed

    //Ram data
    public ArrayList<Data> ramDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products where category='ram'";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showramData() {
        ArrayList<Data> list = ramDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }


    private void ramBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ramBtnActionPerformed
        // TODO add your handling code here:
        showramData();
    }//GEN-LAST:event_ramBtnActionPerformed

    //all products data
    public ArrayList<Data> allDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "SELECT * FROM products";
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showAllData() {
        ArrayList<Data> list = allDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }


    private void allProductsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allProductsBtnActionPerformed
        // TODO add your handling code here:          
        showAllData();
    }//GEN-LAST:event_allProductsBtnActionPerformed

    //filtering minimum price
    
    public ArrayList<Data> minDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            
           
            String query1 = "SELECT a.* FROM products a INNER JOIN ( SELECT category, MIN(price) minPrice FROM products GROUP BY category ) b ON a.category = b.category AND a.price = b.minPrice";
            
            
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showminpriceData() {
        ArrayList<Data> list = minDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }
    
    
    private void minPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPriceActionPerformed
        // TODO add your handling code here:
        showminpriceData();
    }//GEN-LAST:event_minPriceActionPerformed

    
    //filtering max price product
    
    
    
     public ArrayList<Data> maxDataList() {
        ArrayList<Data> datasList = new ArrayList<>();
        try {
            Class.forName("java.sql.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/productdb", "root", "");
            Statement stmt = (Statement) con.createStatement();
            
           
            String query1 = "SELECT a.* FROM products a INNER JOIN ( SELECT category, MAX(price) maxPrice FROM products GROUP BY category ) b ON a.category = b.category AND a.price = b.maxPrice";
            
            
            ResultSet rs = stmt.executeQuery(query1);
            Data data;
            while (rs.next()) {
                data = new Data(rs.getString("id"), rs.getString("name"), rs.getString("price"), rs.getString("brand"), rs.getString("category"));
                datasList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return datasList;
    }

    public void showmaxpriceData() {
        ArrayList<Data> list = maxDataList();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getID();
            row[1] = list.get(i).getName();
            row[2] = list.get(i).getPrice();
            row[3] = list.get(i).getBrand();
            row[4] = list.get(i).getCategory();

            model.addRow(row);
        }
    }
     
    
    
    private void maxPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPriceActionPerformed

        showmaxpriceData();
    }//GEN-LAST:event_maxPriceActionPerformed

    private void BillingHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillingHistoryActionPerformed
        // TODO add your handling code here:
        
        BillingHistory billingHistoryFrame = new BillingHistory();
        billingHistoryFrame.setVisible(true);
        
        billingHistoryFrame.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                // The window is closing
                billingHistoryFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
               
            }
        });      
    }//GEN-LAST:event_BillingHistoryActionPerformed

    private void addAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdminActionPerformed
        // TODO add your handling code here:
        SignupFrame signupFrame = new SignupFrame();
        signupFrame.setVisible(true);
        signupFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_addAdminActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BillingHistory;
    private javax.swing.JButton addAdmin;
    private javax.swing.JButton allProductsBtn;
    private javax.swing.JButton billingbtn;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> comboCat;
    private javax.swing.JButton gpuBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlabel6;
    private javax.swing.JButton maxPrice;
    private javax.swing.JButton minPrice;
    private javax.swing.JButton motherboardBtn;
    private javax.swing.JButton processorBtn;
    private javax.swing.JButton ramBtn;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
